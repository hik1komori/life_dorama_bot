import os
import logging
import sqlite3
import re
import asyncio
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ChatJoinRequest
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters, ChatMemberHandler, ChatJoinRequestHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = [6531897948,7540286215]
ARCHIVE_CHANNEL_ID = os.getenv('ARCHIVE_CHANNEL_ID', '')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN must be set in environment variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–ê–ó–ê –î–ê–ù–ù–´–•
class Database:
    def __init__(self, db_path="/data/korean_doramas.db"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º /data –¥–ª—è Railway persistent storage
        os.makedirs('/data', exist_ok=True)
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–æ—Ä–∞–º
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS doramas (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                dorama_code TEXT UNIQUE NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                release_year INTEGER,
                genre TEXT,
                rating REAL DEFAULT 0,
                poster_file_id TEXT,
                created_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —ç–ø–∏–∑–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS episodes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                dorama_code TEXT NOT NULL,
                episode_number INTEGER NOT NULL,
                file_id TEXT NOT NULL,
                caption TEXT,
                duration INTEGER DEFAULT 0,
                file_size INTEGER DEFAULT 0,
                views INTEGER DEFAULT 0,
                added_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (dorama_code) REFERENCES doramas (dorama_code),
                UNIQUE(dorama_code, episode_number)
            )
        ''')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                total_requests INTEGER DEFAULT 0
            )
        ''')
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                channel_id INTEGER PRIMARY KEY,
                username TEXT,
                title TEXT,
                invite_link TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                is_private BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channel_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                channel_id INTEGER,
                status TEXT DEFAULT 'pending',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (channel_id) REFERENCES channels (channel_id),
                UNIQUE(user_id, channel_id)
            )
        ''')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cursor.execute('''
            INSERT OR IGNORE INTO bot_settings (key, value) VALUES 
            ('welcome_message', 'üé¨ Xush kelibsiz! Koreys doramalarini tomosha qilish uchun maxsus bot.'),
            ('help_message', 'ü§ñ Botdan foydalanish uchun kerakli bolimni tanlang.'),
            ('archive_channel', ?)
        ''', (ARCHIVE_CHANNEL_ID,))
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö –¥–æ—Ä–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–†–ê–ú–ê–ú–ò
    def add_dorama(self, dorama_code, title, description="", release_year=None, genre="", poster_file_id=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –¥–æ—Ä–∞–º—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO doramas 
                (dorama_code, title, description, release_year, genre, poster_file_id) 
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (dorama_code, title, description, release_year, genre, poster_file_id))
            
            conn.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ—Ä–∞–º–∞: {title} (–ö–æ–¥: {dorama_code})")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã: {e}")
            return False
        finally:
            conn.close()

    def get_dorama(self, dorama_code):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–∞–º–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT dorama_code, title, description, release_year, genre, rating, poster_file_id
            FROM doramas WHERE dorama_code = ?
        ''', (dorama_code,))
        
        result = cursor.fetchone()
        conn.close()
        return result

    def get_all_doramas(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Ä–∞–º—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT d.dorama_code, d.title, d.release_year, d.genre, d.rating,
                   COUNT(e.id) as episode_count
            FROM doramas d
            LEFT JOIN episodes e ON d.dorama_code = e.dorama_code
            GROUP BY d.dorama_code
            ORDER BY d.title
        ''')
        
        result = cursor.fetchall()
        conn.close()
        return result

    def search_doramas(self, query):
        """–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        search_pattern = f'%{query}%'
        cursor.execute('''
            SELECT d.dorama_code, d.title, d.release_year, d.genre,
                   COUNT(e.id) as episode_count
            FROM doramas d
            LEFT JOIN episodes e ON d.dorama_code = e.dorama_code
            WHERE d.title LIKE ? OR d.dorama_code LIKE ? OR d.genre LIKE ?
            GROUP BY d.dorama_code
            ORDER BY d.title
            LIMIT 20
        ''', (search_pattern, search_pattern, search_pattern))
        
        result = cursor.fetchall()
        conn.close()
        return result

    def delete_dorama(self, dorama_code):
        """–£–¥–∞–ª—è–µ—Ç –¥–æ—Ä–∞–º—É –∏ –≤—Å–µ –µ—ë —ç–ø–∏–∑–æ–¥—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —ç–ø–∏–∑–æ–¥—ã
            cursor.execute('DELETE FROM episodes WHERE dorama_code = ?', (dorama_code,))
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –¥–æ—Ä–∞–º—É
            cursor.execute('DELETE FROM doramas WHERE dorama_code = ?', (dorama_code,))
            
            conn.commit()
            logger.info(f"‚úÖ –î–æ—Ä–∞–º–∞ {dorama_code} —É–¥–∞–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã: {e}")
            return False
        finally:
            conn.close()

    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –≠–ü–ò–ó–û–î–ê–ú–ò
    def add_episode(self, dorama_code, episode_number, file_id, caption="", duration=0, file_size=0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ø–∏–∑–æ–¥ –∫ –¥–æ—Ä–∞–º–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO episodes 
                (dorama_code, episode_number, file_id, caption, duration, file_size) 
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (dorama_code, episode_number, file_id, caption, duration, file_size))
            
            conn.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ø–∏–∑–æ–¥ {episode_number} –¥–ª—è –¥–æ—Ä–∞–º—ã {dorama_code}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞: {e}")
            return False
        finally:
            conn.close()

    def get_episode(self, dorama_code, episode_number):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ø–∏–∑–æ–¥–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT e.episode_number, e.file_id, e.caption, e.duration, e.file_size, e.views,
                   d.title, d.dorama_code
            FROM episodes e
            JOIN doramas d ON e.dorama_code = d.dorama_code
            WHERE e.dorama_code = ? AND e.episode_number = ?
        ''', (dorama_code, episode_number))
        
        result = cursor.fetchone()
        conn.close()
        return result

    def get_all_episodes(self, dorama_code):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –¥–æ—Ä–∞–º—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT episode_number, file_id, caption, duration, file_size, views
            FROM episodes 
            WHERE dorama_code = ?
            ORDER BY episode_number
        ''', (dorama_code,))
        
        result = cursor.fetchall()
        conn.close()
        return result

    def get_total_episodes(self, dorama_code):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM episodes WHERE dorama_code = ?', (dorama_code,))
        result = cursor.fetchone()[0]
        conn.close()
        return result

    def delete_episode(self, dorama_code, episode_number):
        """–£–¥–∞–ª—è–µ—Ç —ç–ø–∏–∑–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM episodes WHERE dorama_code = ? AND episode_number = ?', 
                         (dorama_code, episode_number))
            conn.commit()
            logger.info(f"‚úÖ –≠–ø–∏–∑–æ–¥ {episode_number} –¥–æ—Ä–∞–º—ã {dorama_code} —É–¥–∞–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞: {e}")
            return False
        finally:
            conn.close()

    def increment_views(self, dorama_code, episode_number):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE episodes SET views = views + 1 
            WHERE dorama_code = ? AND episode_number = ?
        ''', (dorama_code, episode_number))
        conn.commit()
        conn.close()

    # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
    def add_user(self, user_id, username=None, first_name=None, last_name=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
            (user_id, username, first_name, last_name)
        )
        conn.commit()
        conn.close()

    def update_user_activity(self, user_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE users SET last_activity = CURRENT_TIMESTAMP, total_requests = total_requests + 1 WHERE user_id = ?',
            (user_id,)
        )
        conn.commit()
        conn.close()

    def get_all_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, first_name, last_name FROM users')
        result = cursor.fetchall()
        conn.close()
        return result

    def get_active_users_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users WHERE last_activity >= datetime("now", "-30 days")')
        result = cursor.fetchone()[0]
        conn.close()
        return result

    def get_admin_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–∞–º
        cursor.execute('SELECT COUNT(*) FROM doramas')
        total_doramas = cursor.fetchone()[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
        cursor.execute('SELECT COUNT(*) FROM episodes')
        total_episodes = cursor.fetchone()[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ—Ä–∞–º—ã (–ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)
        cursor.execute('''
            SELECT d.title, d.dorama_code, SUM(e.views) as total_views
            FROM doramas d
            JOIN episodes e ON d.dorama_code = e.dorama_code
            GROUP BY d.dorama_code
            ORDER BY total_views DESC
            LIMIT 5
        ''')
        popular_doramas = cursor.fetchall()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) FROM users 
            WHERE DATE(last_activity) = DATE("now")
        ''')
        daily_active = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'total_doramas': total_doramas,
            'total_episodes': total_episodes,
            'total_users': total_users,
            'popular_doramas': popular_doramas,
            'daily_active': daily_active
        }

    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ù–ê–õ–ê–ú–ò
    def get_all_channels(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT channel_id, username, title, invite_link, is_private FROM channels WHERE is_active = TRUE')
        result = cursor.fetchall()
        conn.close()
        return result
    
    def add_channel(self, channel_id, username="", title=None, invite_link=None, is_private=False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute(
                'INSERT OR REPLACE INTO channels (channel_id, username, title, invite_link, is_private) VALUES (?, ?, ?, ?, ?)',
                (channel_id, username, title, invite_link, is_private)
            )
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå Kanal qoshishda xato: {e}")
            return False
        finally:
            conn.close()
    
    def delete_channel(self, channel_id):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute('DELETE FROM channels WHERE channel_id = ?', (channel_id,))
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå Kanalni ochirishda xato: {e}")
            return False
        finally:
            conn.close()

    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–Ø–í–ö–ê–ú–ò
    def add_channel_request(self, user_id, channel_id, status='pending'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO channel_requests 
                (user_id, channel_id, status, updated_at) 
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            ''', (user_id, channel_id, status))
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå So'rov qoshishda xato: {e}")
            return False
        finally:
            conn.close()
    
    def get_channel_request(self, user_id, channel_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT status, created_at FROM channel_requests WHERE user_id = ? AND channel_id = ?',
            (user_id, channel_id)
        )
        result = cursor.fetchone()
        conn.close()
        return result
    
    def get_pending_requests_count(self, channel_id=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if channel_id:
            cursor.execute(
                'SELECT COUNT(*) FROM channel_requests WHERE status = "pending" AND channel_id = ?',
                (channel_id,)
            )
        else:
            cursor.execute('SELECT COUNT(*) FROM channel_requests WHERE status = "pending"')
        
        result = cursor.fetchone()[0]
        conn.close()
        return result
    
    def update_channel_request_status(self, user_id, channel_id, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute('''
                UPDATE channel_requests 
                SET status = ?, updated_at = CURRENT_TIMESTAMP 
                WHERE user_id = ? AND channel_id = ?
            ''', (status, user_id, channel_id))
            conn.commit()
            return cursor.rowcount > 0
        except Exception as e:
            logger.error(f"‚ùå So'rov yangilashda xato: {e}")
            return False
        finally:
            conn.close()

    # –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö
    def get_setting(self, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM bot_settings WHERE key = ?', (key,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    
    def update_setting(self, key, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO bot_settings (key, value) VALUES (?, ?)', (key, value))
        conn.commit()
        conn.close()
        return True

# –°–û–ó–î–ê–ï–ú –û–ë–™–ï–ö–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•
db = Database()

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò
async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã - –†–ê–ó–î–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê"""
    channels = db.get_all_channels()
    not_subscribed = []
    
    if not channels:
        return []
    
    for channel_id, username, title, invite_link, is_private in channels:
        try:
            if is_private:
                # –î–õ–Ø –ü–†–ò–í–ê–¢–ù–´–• –ö–ê–ù–ê–õ–û–í - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏
                request = db.get_channel_request(user_id, channel_id)
                if not request or request[0] not in ['pending', 'approved']:
                    # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    not_subscribed.append((channel_id, username, title, invite_link, is_private))
                    
            else:
                # –î–õ–Ø –ü–£–ë–õ–ò–ß–ù–´–• –ö–ê–ù–ê–õ–û–í - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                if member.status in ['left', 'kicked']:
                    not_subscribed.append((channel_id, username, title, invite_link, is_private))
                    
        except Exception as e:
            logger.warning(f"Kanal {channel_id} tekshirishda xato: {e}")
            not_subscribed.append((channel_id, username, title, invite_link, is_private))
    
    return not_subscribed

async def require_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è"""
    user = update.effective_user
    if not user:
        return False
    
    if user.id in ADMIN_IDS:
        return True
    
    db.update_user_activity(user.id)
    
    not_subscribed = await check_subscription(user.id, context)
    
    if not_subscribed:
        await show_subscription_required(update, context, not_subscribed)
        return False
    
    return True

async def show_subscription_required(update: Update, context: ContextTypes.DEFAULT_TYPE, not_subscribed_channels):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not not_subscribed_channels:
        return True
    
    keyboard = []
    for channel_id, username, title, invite_link, is_private in not_subscribed_channels:
        channel_name = title or username or f"Kanal {channel_id}"
        
        if is_private and invite_link:
            url = invite_link
            button_text = f"üîí {channel_name} (Maxfiy kanal - ariza qoldiring)"
        elif invite_link:
            url = invite_link
            button_text = f"üì¢ {channel_name}"
        else:
            clean_username = (username or '').lstrip('@')
            if clean_username:
                url = f"https://t.me/{clean_username}"
                button_text = f"üì¢ {channel_name}"
            else:
                continue
        
        keyboard.append([InlineKeyboardButton(button_text, url=url)])
    
    keyboard.append([InlineKeyboardButton("‚úÖ Tekshirish", callback_data="check_subscription")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üì¢ Botdan foydalanish uchun quyidagi kanallarga obuna bo'ling:\n\n"
    for channel_id, username, title, invite_link, is_private in not_subscribed_channels:
        channel_name = title or username or f"Kanal {channel_id}"
        if is_private:
            text += f"‚Ä¢ üîí {channel_name} (Maxfiy kanal - ariza qoldiring)\n"
        else:
            text += f"‚Ä¢ üì¢ {channel_name}\n"
    
    text += "\nObuna bo'lgachingiz yoki ariza qoldirgachingiz ¬´‚úÖ Tekshirish¬ª tugmasini bosing."
    
    try:
        if update.callback_query:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        return False
    except Exception as e:
        logger.error(f"Obunani ko'rsatish xatosi: {e}")
        return False

async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    not_subscribed = await check_subscription(user.id, context)
    
    if not not_subscribed:
        await query.edit_message_text(
            "‚úÖ Ajoyib! Endi siz botdan foydalanishingiz mumkin.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await show_subscription_required(update, context, not_subscribed)

# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ó–ê–Ø–í–û–ö
async def handle_chat_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    join_request = update.chat_join_request
    user = join_request.from_user
    chat = join_request.chat
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db.add_channel_request(user.id, chat.id, 'pending')
    
    if success:
        logger.info(f"Yangi so'rov: {user.id} -> {chat.id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üÜï Yangi so'rov!\n\n"
                         f"üë§ Foydalanuvchi: {user.first_name} (@{user.username or 'Noma lum'})\n"
                         f"üì¢ Kanal: {chat.title}\n"
                         f"üÜî User ID: {user.id}\n"
                         f"üÜî Chat ID: {chat.id}"
                )
            except Exception as e:
                logger.error(f"Adminni xabarlashda xato {admin_id}: {e}")

async def handle_chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    chat_member = update.chat_member
    user = chat_member.new_chat_member.user
    chat = update.chat_member.chat
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    channels = db.get_all_channels()
    channel_ids = [channel[0] for channel in channels]
    
    if chat.id not in channel_ids:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    channel_info = next((c for c in channels if c[0] == chat.id), None)
    if not channel_info:
        return
    
    channel_id, username, title, invite_link, is_private = channel_info
    
    if not is_private:
        return  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    new_status = chat_member.new_chat_member.status
    old_status = chat_member.old_chat_member.status
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –≤ –∫–∞–Ω–∞–ª
    if new_status in ['member', 'administrator'] and old_status in ['left', 'kicked']:
        db.add_channel_request(user.id, chat.id, 'approved')
        logger.info(f"Foydalanuvchi qabul qilindi: {user.id} -> {chat.id}")
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞
    elif new_status in ['left', 'kicked'] and old_status in ['member', 'administrator']:
        db.add_channel_request(user.id, chat.id, 'cancelled')
        logger.info(f"Foydalanuvchi chiqib ketdi: {user.id} -> {chat.id}")

# –ö–õ–ê–í–ò–ê–¢–£–†–´
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [KeyboardButton("üîç Qidirish"), KeyboardButton("üìö Barcha doramalar")],
        [KeyboardButton("üÜï Yangi qo'shilgan"), KeyboardButton("üìä Mashhurlar")],
        [KeyboardButton("‚≠ê Tasodifiy"), KeyboardButton("‚ÑπÔ∏è Yordam")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_main_menu_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üîç Qidirish", callback_data="search")],
        [InlineKeyboardButton("üìö Barcha doramalar", callback_data="all_doramas_0")],
        [InlineKeyboardButton("üÜï Yangi qo'shilgan", callback_data="recent_doramas_0")],
        [InlineKeyboardButton("üìä Mashhurlar", callback_data="popular_doramas_0")],
        [InlineKeyboardButton("‚≠ê Tasodifiy dorama", callback_data="random_dorama")],
        [InlineKeyboardButton("‚ÑπÔ∏è Yordam", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üìä Statistika", callback_data="admin_stats")],
        [InlineKeyboardButton("üé¨ Doramalar", callback_data="admin_doramas_0")],
        [InlineKeyboardButton("üóëÔ∏è O'chirish", callback_data="admin_delete_0")],
        [InlineKeyboardButton("üì¢ Kanallar", callback_data="admin_channels")],
        [InlineKeyboardButton("‚öôÔ∏è Sozlamalar", callback_data="admin_settings")],
        [InlineKeyboardButton("üÜï So'rovlar", callback_data="admin_requests_0")],
        [InlineKeyboardButton("üì¢ Xabar yuborish", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üîô Bosh menyu", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [InlineKeyboardButton("üëã Xush kelish xabarini o'zgartirish", callback_data="admin_set_welcome")],
        [InlineKeyboardButton("‚ÑπÔ∏è Yordam xabarini o'zgartirish", callback_data="admin_set_help")],
        [InlineKeyboardButton("üìÅ Arxiv kanali", callback_data="admin_set_archive")],
        [InlineKeyboardButton("üîô Orqaga", callback_data="admin_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_dorama_keyboard(dorama_code, total_episodes):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ø–∏–∑–æ–¥–æ–≤"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —ç–ø–∏–∑–æ–¥–æ–≤ –∏–ª–∏ –≤—Å–µ—Ö, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ
    episodes_to_show = min(10, total_episodes)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 —ç–ø–∏–∑–æ–¥–æ–≤
    for i in range(0, episodes_to_show, 5):
        row = []
        for j in range(i, min(i + 5, episodes_to_show)):
            ep_num = j + 1
            row.append(InlineKeyboardButton(f"{ep_num}", callback_data=f"watch_{dorama_code}_{ep_num}"))
        keyboard.append(row)
    
    # –ï—Å–ª–∏ —ç–ø–∏–∑–æ–¥–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —ç–ø–∏–∑–æ–¥—ã"
    if total_episodes > 10:
        keyboard.append([InlineKeyboardButton("üìã Barcha qismlar", callback_data=f"all_episodes_{dorama_code}")])
    
    keyboard.append([InlineKeyboardButton("üé¨ Barcha qismlarni yuborish", callback_data=f"send_all_{dorama_code}")])
    keyboard.append([InlineKeyboardButton("üîô Bosh menyu", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_all_episodes_keyboard(dorama_code, page=0, episodes_per_page=15):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    episodes = db.get_all_episodes(dorama_code)
    total_episodes = len(episodes)
    total_pages = (total_episodes + episodes_per_page - 1) // episodes_per_page
    
    keyboard = []
    
    # –≠–ø–∏–∑–æ–¥—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * episodes_per_page
    end_idx = min(start_idx + episodes_per_page, total_episodes)
    
    for i in range(start_idx, end_idx, 3):
        row = []
        for j in range(i, min(i + 3, end_idx)):
            ep_num = episodes[j][0]
            row.append(InlineKeyboardButton(f"{ep_num}", callback_data=f"watch_{dorama_code}_{ep_num}"))
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"episodes_{dorama_code}_{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"episodes_{dorama_code}_{page+1}"))
        
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üé¨ Barcha qismlarni yuborish", callback_data=f"send_all_{dorama_code}")])
    keyboard.append([InlineKeyboardButton("üîô Orqaga", callback_data=f"dorama_{dorama_code}")])
    
    return InlineKeyboardMarkup(keyboard)

def get_dorama_list_keyboard(doramas, prefix="dorama"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º"""
    keyboard = []
    
    for dorama in doramas:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if len(dorama) == 6:
            dorama_code, title, year, genre, rating, episode_count = dorama
        elif len(dorama) == 5:
            dorama_code, title, year, genre, episode_count = dorama
            rating = 0  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        
        display_text = f"üì∫ {title}"
        if year:
            display_text += f" ({year})"
        if episode_count:
            display_text += f" - {episode_count}qism"
        
        keyboard.append([InlineKeyboardButton(display_text, callback_data=f"{prefix}_{dorama_code}")])
    
    keyboard.append([InlineKeyboardButton("üîô Bosh menyu", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_dorama_list_keyboard(doramas, page, total_pages, delete_mode=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Ä–∞–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = []
    
    for dorama_code, title, year, genre, rating, episode_count in doramas:
        display_text = f"üì∫ {title} ({episode_count}q)"
        if delete_mode:
            keyboard.append([
                InlineKeyboardButton(display_text, callback_data=f"admin_dorama_info_{dorama_code}"),
                InlineKeyboardButton("‚ùå", callback_data=f"admin_delete_confirm_{dorama_code}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(display_text, callback_data=f"admin_dorama_info_{dorama_code}")])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_doramas_{page-1}" if not delete_mode else f"admin_delete_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_doramas_{page+1}" if not delete_mode else f"admin_delete_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = []
    if not delete_mode:
        action_buttons.append(InlineKeyboardButton("üóëÔ∏è O'chirish", callback_data="admin_delete_0"))
    else:
        action_buttons.append(InlineKeyboardButton("üìã Ko'rish", callback_data="admin_doramas_0"))
    
    action_buttons.append(InlineKeyboardButton("üîô Admin", callback_data="admin_menu"))
    keyboard.append(action_buttons)
    
    return InlineKeyboardMarkup(keyboard)

def get_admin_delete_confirmation_keyboard(dorama_code):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ HA", callback_data=f"admin_confirm_delete_{dorama_code}"),
            InlineKeyboardButton("‚ùå BEKOR", callback_data="admin_delete_0")
        ],
        [InlineKeyboardButton("üîô Admin", callback_data="admin_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_requests_keyboard(requests, page, total_pages):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏"""
    keyboard = []
    
    for user_id, channel_id, status, created_at, username, first_name, title in requests:
        user_display = f"@{username}" if username else first_name
        request_text = f"{user_display} - {title[:20]}..."
        keyboard.append([
            InlineKeyboardButton(request_text, callback_data=f"admin_request_info_{user_id}_{channel_id}"),
            InlineKeyboardButton("‚úÖ", callback_data=f"admin_approve_request_{user_id}_{channel_id}")
        ])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_requests_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_requests_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô Admin", callback_data="admin_menu")])
    
    return InlineKeyboardMarkup(keyboard)

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    db.update_user_activity(user.id)
    
    if user.id in ADMIN_IDS:
        await update.message.reply_text(
            "üë®‚Äçüíª Admin paneliga xush kelibsiz!",
            reply_markup=get_admin_keyboard()
        )
        return
    
    if not await require_subscription(update, context):
        return
    
    welcome_message = db.get_setting('welcome_message') or "üé¨ Xush kelibsiz! Koreys doramalarini tomosha qilish uchun maxsus bot."
    
    await update.message.reply_text(
        f"{welcome_message}\n\n"
        f"Salom, {user.first_name}! Kerakli bo'limni tanlang:",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text.strip()
    
    db.update_user_activity(user.id)
    
    if user.id not in ADMIN_IDS:
        if not await require_subscription(update, context):
            return
    
    if text == "üîç Qidirish":
        await update.message.reply_text(
            "üîç Dorama nomini yoki kodini kiriting:\n\n"
            "Misol: <code>Yulduzlar</code> yoki <code>YL2024</code>",
            parse_mode="HTML"
        )
    
    elif text == "üìö Barcha doramalar":
        await show_all_doramas(update, context)
    
    elif text == "üÜï Yangi qo'shilgan":
        await show_recent_doramas(update, context)
    
    elif text == "üìä Mashhurlar":
        await show_popular_doramas(update, context)
    
    elif text == "‚≠ê Tasodifiy":
        await send_random_dorama(update, context)
    
    elif text == "‚ÑπÔ∏è Yordam":
        await show_help(update, context)
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if 'broadcast_message' in context.user_data:
            await handle_broadcast_confirmation(update, context)
        else:
            await search_doramas(update, context, text)

async def search_doramas(update: Update, context: ContextTypes.DEFAULT_TYPE, query):
    """–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º"""
    doramas = db.search_doramas(query)
    
    if not doramas:
        await update.message.reply_text(
            f"‚ùå '{query}' bo'yicha doramalar topilmadi\n\n"
            "Boshqa nom yoki kod bilan urunib ko'ring."
        )
        return
    
    if len(doramas) == 1:
        dorama_code = doramas[0][0]
        await send_all_episodes(update, context, dorama_code)
    else:
        text = f"üîç '{query}' bo'yicha topilgan doramalar ({len(doramas)} ta):\n\n"
for i, dorama in enumerate(doramas, 1):
    if len(dorama) >= 5:
        code, title, year, genre, episode_count = dorama[:5]
    else:
        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏            text += f"{i}. {title}"
            if year:
                text += f" ({year})"
            if episode_count:
                text += f" - {episode_count} qism"
            text += "\n"
        
        await update.message.reply_text(text, reply_markup=get_dorama_list_keyboard(doramas))

async def send_all_episodes(update: Update, context: ContextTypes.DEFAULT_TYPE, dorama_code):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –¥–æ—Ä–∞–º—ã –ø–æ–¥—Ä—è–¥"""
    dorama = db.get_dorama(dorama_code)
    episodes = db.get_all_episodes(dorama_code)
    
    if not dorama or not episodes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text("‚ùå Dorama yoki qismlar topilmadi")
        else:
            await update.message.reply_text("‚ùå Dorama yoki qismlar topilmadi")
        return
    
    code, title, description, release_year, genre, rating, poster = dorama
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if hasattr(update, 'callback_query') and update.callback_query:
        user = update.callback_query.from_user
        is_callback = True
    else:
        user = update.effective_user
        is_callback = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–∞–º–µ
    info_text = f"üì∫ **{title}**\n\n"
    
    if description:
        info_text += f"üìñ {description}\n\n"
    
    info_text += f"üìä **Ma'lumotlar:**\n"
    info_text += f"‚Ä¢ üé¨ Kod: `{code}`\n"
    info_text += f"‚Ä¢ üìã Jami qismlar: {len(episodes)} ta\n"
    
    if release_year:
        info_text += f"‚Ä¢ üóìÔ∏è Yil: {release_year}\n"
    
    if genre:
        info_text += f"‚Ä¢ üé≠ Janr: {genre}\n"
    
    if rating and rating > 0:
        info_text += f"‚Ä¢ ‚≠ê Reyting: {rating}/10\n"
    
    info_text += f"\nüé¨ **{len(episodes)} ta qism yuklanmoqda...**"
    
    if is_callback:
        await update.callback_query.edit_message_text(info_text)
        chat_id = user.id
    else:
        info_message = await update.message.reply_text(info_text)
        chat_id = update.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –ø–æ–¥—Ä—è–¥
    sent_count = 0
    for episode in episodes:
        episode_number, file_id, caption, duration, file_size, views = episode
        
        try:
            message_caption = caption or f"üì∫ {title}\n\nQism: {episode_number}"
            
            await context.bot.send_video(
                chat_id=chat_id,
                video=file_id,
                caption=message_caption,
                protect_content=True
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            db.increment_views(dorama_code, episode_number)
            
            sent_count += 1
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            
        except Exception as e:
            logger.error(f"Video yuborish xatosi (qism {episode_number}): {e}")
            continue
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    completion_text = f"‚úÖ **{title}**\n\n"
    completion_text += f"üé¨ Barcha {sent_count} qism muvaffaqiyatli yuklandi!\n\n"
    completion_text += "Boshqa dorama qidirish uchun /start ni bosing"
    
    if is_callback:
        await context.bot.send_message(chat_id=chat_id, text=completion_text, reply_markup=get_main_menu_keyboard())
    else:
        await update.message.reply_text(completion_text, reply_markup=get_main_keyboard())

async def send_single_episode(update: Update, context: ContextTypes.DEFAULT_TYPE, dorama_code, episode_number):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —ç–ø–∏–∑–æ–¥"""
    episode = db.get_episode(dorama_code, episode_number)
    
    if not episode:
        await update.callback_query.answer("‚ùå Qism topilmadi", show_alert=True)
        return
    
    ep_num, file_id, caption, duration, file_size, views, title, code = episode
    
    user = update.callback_query.from_user
    
    try:
        message_caption = caption or f"üì∫ {title}\n\nQism: {episode_number}"
        
        await context.bot.send_video(
            chat_id=user.id,
            video=file_id,
            caption=message_caption,
            protect_content=True
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        db.increment_views(dorama_code, episode_number)
        
        await update.callback_query.answer(f"‚úÖ {episode_number}-qism yuklandi")
        
    except Exception as e:
        logger.error(f"Video yuborish xatosi: {e}")
        await update.callback_query.answer("‚ùå Video yuborishda xato", show_alert=True)

async def show_dorama_info(update: Update, context: ContextTypes.DEFAULT_TYPE, dorama_code):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–∞–º–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è"""
    dorama = db.get_dorama(dorama_code)
    total_episodes = db.get_total_episodes(dorama_code)
    
    if not dorama:
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text("‚ùå Dorama topilmadi")
        else:
            await update.message.reply_text("‚ùå Dorama topilmadi")
        return
    
    code, title, description, release_year, genre, rating, poster = dorama
    
    text = f"üì∫ **{title}**\n\n"
    
    if description:
        text += f"üìñ {description}\n\n"
    
    text += f"üìä **Ma'lumotlar:**\n"
    text += f"‚Ä¢ üé¨ Kod: `{code}`\n"
    text += f"‚Ä¢ üìã Jami qismlar: {total_episodes} ta\n"
    
    if release_year:
        text += f"‚Ä¢ üóìÔ∏è Yil: {release_year}\n"
    
    if genre:
        text += f"‚Ä¢ üé≠ Janr: {genre}\n"
    
    if rating and rating > 0:
        text += f"‚Ä¢ ‚≠ê Reyting: {rating}/10\n"
    
    text += f"\nüé¨ **Tanlang:**"
    
    keyboard = get_dorama_keyboard(dorama_code, total_episodes)
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)
    else:
        await update.message.reply_text(text, reply_markup=keyboard)

async def show_all_episodes(update: Update, context: ContextTypes.DEFAULT_TYPE, dorama_code, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –¥–æ—Ä–∞–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    episodes = db.get_all_episodes(dorama_code)
    dorama = db.get_dorama(dorama_code)
    
    if not episodes or not dorama:
        await update.callback_query.edit_message_text("‚ùå Bu dorama uchun qismlar topilmadi")
        return
    
    title = dorama[1]
    total_episodes = len(episodes)
    
    text = f"üì∫ {title}\n\n"
    text += f"üìã Barcha qismlar ({total_episodes} ta):\n\n"
    text += "Kerakli qismni tanlang yoki barchasini yuborish tugmasini bosing:"
    
    keyboard = get_all_episodes_keyboard(dorama_code, page)
    await update.callback_query.edit_message_text(text, reply_markup=keyboard)

async def show_all_doramas(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Ä–∞–º—ã"""
    doramas = db.get_all_doramas()
    
    if not doramas:
        await update.message.reply_text("üìö Hozircha doramalar mavjud emas")
        return
    
    text = "üìö Barcha doramalar:\n\n"
    for i, (code, title, year, genre, rating, episode_count) in enumerate(doramas, 1):
        text += f"{i}. {title}"
        if year:
            text += f" ({year})"
        if episode_count:
            text += f" - {episode_count} qism"
        text += "\n"
    
    await update.message.reply_text(text, reply_markup=get_dorama_list_keyboard(doramas))

async def show_recent_doramas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Ä–∞–º—ã"""
    doramas = db.get_all_doramas()
    
    if not doramas:
        await update.message.reply_text("üÜï Hozircha yangi doramalar yo'q")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–æ—Ä–∞–º
    recent_doramas = doramas[:10]
    
    text = "üÜï So'ngi qo'shilgan doramalar:\n\n"
    for i, (code, title, year, genre, rating, episode_count) in enumerate(recent_doramas, 1):
        text += f"{i}. {title}"
        if year:
            text += f" ({year})"
        if episode_count:
            text += f" - {episode_count} qism"
        text += "\n"
    
    await update.message.reply_text(text, reply_markup=get_dorama_list_keyboard(recent_doramas))

async def show_popular_doramas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ—Ä–∞–º—ã"""
    stats = db.get_admin_stats()
    
    if not stats['popular_doramas']:
        await update.message.reply_text("üìä Hozircha mashhur doramalar yo'q")
        return
    
    text = "üìä Mashhur doramalar:\n\n"
    for i, (title, code, views) in enumerate(stats['popular_doramas'], 1):
        text += f"{i}. {title} - {views} ko'rish\n"
    
    await update.message.reply_text(text)

async def send_random_dorama(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Ä–∞–º—É"""
    doramas = db.get_all_doramas()
    
    if not doramas:
        if update.callback_query:
            await update.callback_query.message.reply_text("‚ùå Hozircha doramalar mavjud emas")
        else:
            await update.message.reply_text("‚ùå Hozircha doramalar mavjud emas")
        return
    
    import random
    random_dorama = random.choice(doramas)
    dorama_code = random_dorama[0]
    
    if update.callback_query:
        await send_all_episodes(update, context, dorama_code)
    else:
        await send_all_episodes(update, context, dorama_code)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
    help_text = (
        "ü§ñ Koreys doramalari boti\n\n"
        "üé¨ **Qanday ishlatish:**\n"
        "‚Ä¢ üîç Qidirish - dorama nomi yoki kodini yozing\n"
        "‚Ä¢ üìö Barcha doramalar - ro'yxatni ko'ring\n"
        "‚Ä¢ üÜï Yangi qo'shilgan - so'ngi qo'shilganlar\n"
        "‚Ä¢ üìä Mashhur doramalar - eng ko'p ko'rilganlar\n\n"
        "üì± **Yangi imkoniyat:**\n"
        "‚Ä¢ Endi barcha qismlar avtomatik ravishda ketma-ket yuboriladi!\n\n"
        "üçø Tomosha qiling va zavqlaning!"
    )
    
    await update.message.reply_text(help_text)

# –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò
async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    stats = db.get_admin_stats()
    active_users = db.get_active_users_count()
    
    text = (
        f"üìä **Admin statistikasi:**\n\n"
        f"üé¨ **Doramalar:** {stats['total_doramas']} ta\n"
        f"üì∫ **Qismlar:** {stats['total_episodes']} ta\n"
        f"üë• **Foydalanuvchilar:** {stats['total_users']} ta\n"
        f"üìà **Faol foydalanuvchilar (30 kun):** {active_users} ta\n"
        f"üìà **Kunlik aktiv:** {stats['daily_active']} ta\n"
        f"üÜï **Kutilayotgan so'rovlar:** {db.get_pending_requests_count()} ta\n\n"
        f"üî• **Eng mashhur doramalar:**\n"
    )
    
    for i, (title, code, views) in enumerate(stats['popular_doramas'], 1):
        text += f"{i}. {title} - {views} ko'rish\n"
    
    keyboard = [[InlineKeyboardButton("üîô Orqaga", callback_data="admin_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_admin_doramas(query, page=0, delete_mode=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    limit = 10
    offset = page * limit
    
    doramas = db.get_all_doramas()
    total_count = len(doramas)
    total_pages = (total_count + limit - 1) // limit if total_count > 0 else 1
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_doramas = doramas[offset:offset + limit]
    
    if not page_doramas:
        await query.edit_message_text(
            "üì≠ Hozircha doramalar mavjud emas",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Admin", callback_data="admin_menu")]])
        )
        return
    
    if delete_mode:
        text = f"üóëÔ∏è **Doramalarni o'chirish** (Sahifa {page+1}/{total_pages})\n\n"
        text += "Quyidagi doramalardan birini o'chirishingiz mumkin:\n\n"
    else:
        text = f"üé¨ **Barcha doramalar** (Sahifa {page+1}/{total_pages})\n\n"
        text += f"Jami doramalar: {total_count} ta\n\n"
    
    for i, (code, title, year, genre, rating, episode_count) in enumerate(page_doramas, offset + 1):
        text += f"{i}. üé¨ {title}\n   üîó Kod: {code}\n   üì∫ Qismlar: {episode_count} ta\n\n"
    
    await query.edit_message_text(text, reply_markup=get_admin_dorama_list_keyboard(page_doramas, page, total_pages, delete_mode))

async def show_delete_confirmation(query, dorama_code):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã"""
    dorama = db.get_dorama(dorama_code)
    if not dorama:
        await query.answer("‚ùå Dorama topilmadi", show_alert=True)
        return
    
    code, title, description, release_year, genre, rating, poster = dorama
    total_episodes = db.get_total_episodes(dorama_code)
    
    text = (
        f"‚ö†Ô∏è **DORAMANI O'CHIRISH** ‚ö†Ô∏è\n\n"
        f"üé¨ **Dorama:** {title}\n"
        f"üîó **Kod:** {code}\n"
        f"üì∫ **Qismlar:** {total_episodes} ta\n\n"
        f"‚ùå **Diqqat! Bu amalni ortga qaytarib bo'lmaydi!**\n"
        f"Dorama va barcha qismlari butunlay o'chib ketadi.\n\n"
        f"Rostan ham o'chirmoqchimisiz?"
    )
    
    await query.edit_message_text(text, reply_markup=get_admin_delete_confirmation_keyboard(dorama_code))

async def delete_dorama_confirmed(query, dorama_code):
    """–£–¥–∞–ª—è–µ—Ç –¥–æ—Ä–∞–º—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    success = db.delete_dorama(dorama_code)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ Dorama #{dorama_code} o'chirildi!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Doramalar ro'yxati", callback_data="admin_delete_0")]])
        )
    else:
        await query.edit_message_text(
            f"‚ùå Doramani o'chirishda xato!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Doramalar ro'yxati", callback_data="admin_delete_0")]])
        )

async def show_admin_dorama_info(query, dorama_code):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–∞–º–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    dorama = db.get_dorama(dorama_code)
    if not dorama:
        await query.answer("‚ùå Dorama topilmadi", show_alert=True)
        return
    
    code, title, description, release_year, genre, rating, poster = dorama
    total_episodes = db.get_total_episodes(dorama_code)
    
    text = f"üé¨ **Dorama ma'lumotlari**\n\n"
    text += f"üìù **Nomi:** {title}\n"
    text += f"üîó **Kodi:** {code}\n"
    text += f"üì∫ **Qismlar:** {total_episodes} ta\n"
    
    if release_year:
        text += f"üóìÔ∏è **Yil:** {release_year}\n"
    
    if genre:
        text += f"üé≠ **Janr:** {genre}\n"
    
    if rating and rating > 0:
        text += f"‚≠ê **Reyting:** {rating}/10\n"
    
    if description:
        text += f"\nüìÑ **Tavsif:**\n{description[:200]}..."
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è O'chirish", callback_data=f"admin_delete_confirm_{dorama_code}")],
        [InlineKeyboardButton("üîô Doramalar ro'yxati", callback_data="admin_doramas_0")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_admin_channels(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    channels = db.get_all_channels()
    
    text = "üì¢ **Kanallar ro'yxati:**\n\n"
    if channels:
        for channel_id, username, title, invite_link, is_private in channels:
            channel_type = "üîí Maxfiy" if is_private else "üì¢ Ochiq"
            text += f"‚Ä¢ {channel_type} {title or username or f'Kanal {channel_id}'}\n"
            if invite_link:
                text += f"  üîó Link: {invite_link}\n"
            text += f"  üÜî ID: {channel_id}\n\n"
    else:
        text += "üì≠ Hozircha kanallar yo'q\n"
    
    text += "\n**Kanal qo'shish:** /addchannel <id> <@username> [nomi] [invite_link] [private]"
    text += "\n**Maxfiy kanal qo'shish:** /addprivatechannel <id> <invite_link> [nomi]"
    text += "\n**Kanal o'chirish:** /deletechannel <id>"
    
    keyboard = [[InlineKeyboardButton("üîô Orqaga", callback_data="admin_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_admin_requests(query, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫—É
    text = "üÜï **Kutilayotgan so'rovlar:**\n\n"
    text += f"üìä Jami so'rovlar: {db.get_pending_requests_count()} ta\n\n"
    text += "Bu yerda foydalanuvchilarning maxfiy kanallarga so'rovlari ko'rsatiladi."
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    requests = []  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: db.get_pending_requests()
    
    keyboard = get_admin_requests_keyboard(requests, page, 1)
    await query.edit_message_text(text, reply_markup=keyboard)

async def show_admin_settings(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    welcome_message = db.get_setting('welcome_message')
    help_message = db.get_setting('help_message')
    archive_channel = db.get_setting('archive_channel')
    
    text = (
        f"‚öôÔ∏è **Bot sozlamalari:**\n\n"
        f"üëã **Xush kelish xabari:**\n{welcome_message[:100]}...\n\n"
        f"‚ÑπÔ∏è **Yordam xabari:**\n{help_message[:100]}...\n\n"
        f"üìÅ **Arxiv kanali:** {archive_channel or 'O ªrnatilmagan'}\n\n"
        f"üë®‚Äçüíª **Adminlar soni:** {len(ADMIN_IDS)} ta\n\n"
        f"Quyidagi sozlamalarni o'zgartirishingiz mumkin:"
    )
    
    await query.edit_message_text(text, reply_markup=get_admin_settings_keyboard())

async def admin_set_welcome_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üëã **Yangi xush kelish xabarini kiriting:**\n\n"
        "Bu xabar har bir foydalanuvchi /start ni bosganda ko'radi.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Orqaga", callback_data="admin_settings")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_welcome_message'] = True

async def admin_set_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ÑπÔ∏è **Yangi yordam xabarini kiriting:**\n\n"
        "Bu xabar foydalanuvchi Yordam bo'limini tanlaganda ko'radi.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Orqaga", callback_data="admin_settings")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_help_message'] = True

async def admin_set_archive_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –∫–∞–Ω–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìÅ **Yangi arxiv kanal ID sini kiriting:**\n\n"
        "Bu kanalga barcha yangi qo'shilgan videolar saqlanadi.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Orqaga", callback_data="admin_settings")]
        ])
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_archive_channel'] = True

async def admin_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üì¢ **Xabar yuborish (Broadcast)**\n\n"
        "Barcha foydalanuvchilarga xabar yuborish uchun:\n\n"
        "1. Xabaringizni yuboring (text, rasm, video)\n"
        "2. Shu xabarga javoban /broadcast buyrug'ini yozing\n\n"
        "Yoki shunchaki /broadcast buyrug'iga javoban xabar yuboring.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô Orqaga", callback_data="admin_menu")]
        ])
    )

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö
async def handle_settings_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    text = update.message.text
    
    if context.user_data.get('awaiting_welcome_message'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.update_setting('welcome_message', text)
        await update.message.reply_text(
            "‚úÖ Xush kelish xabari muvaffaqiyatli o'zgartirildi!",
            reply_markup=get_admin_keyboard()
        )
        context.user_data.pop('awaiting_welcome_message', None)
        
    elif context.user_data.get('awaiting_help_message'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
        db.update_setting('help_message', text)
        await update.message.reply_text(
            "‚úÖ Yordam xabari muvaffaqiyatli o'zgartirildi!",
            reply_markup=get_admin_keyboard()
        )
        context.user_data.pop('awaiting_help_message', None)
        
    elif context.user_data.get('awaiting_archive_channel'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID –∞—Ä—Ö–∏–≤–∞ –∫–∞–Ω–∞–ª–∞
        db.update_setting('archive_channel', text)
        await update.message.reply_text(
            "‚úÖ Arxiv kanali muvaffaqiyatli o'zgartirildi!",
            reply_markup=get_admin_keyboard()
        )
        context.user_data.pop('awaiting_archive_channel', None)

# –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå Bu komanda faqat adminlar uchun!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message.reply_to_message:
        await update.message.reply_text(
            "üì¢ **Xabar yuborish (Broadcast)**\n\n"
            "Barcha foydalanuvchilarga xabar yuborish uchun:\n\n"
            "1. Xabaringizni yuboring (text, rasm, video)\n"
            "2. Shu xabarga javoban /broadcast buyrug'ini yozing\n\n"
            "Yoki shunchaki /broadcast buyrug'iga javoban xabar yuboring."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    message_to_forward = update.message.reply_to_message
    users = db.get_all_users()
    total_users = len(users)
    
    if total_users == 0:
        await update.message.reply_text("‚ùå Hozircha foydalanuvchilar mavjud emas")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    progress_message = await update.message.reply_text(
        f"üì§ Xabar yuborilmoqda...\n\n"
        f"üìä Progress: 0/{total_users}\n"
        f"‚úÖ Muvaffaqiyatli: 0\n"
        f"‚ùå Xatolar: 0"
    )
    
    successful = 0
    failed = 0
    
    for i, (user_id, username, first_name, last_name) in enumerate(users, 1):
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_to_forward.forward(chat_id=user_id)
            successful += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if i % 10 == 0 or i == total_users:
                await context.bot.edit_message_text(
                    chat_id=update.message.chat_id,
                    message_id=progress_message.message_id,
                    text=f"üì§ Xabar yuborilmoqda...\n\n"
                         f"üìä Progress: {i}/{total_users}\n"
                         f"‚úÖ Muvaffaqiyatli: {successful}\n"
                         f"‚ùå Xatolar: {failed}"
                )
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.1)
            
        except Exception as e:
            failed += 1
            logger.error(f"Xabar yuborishda xato {user_id}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"‚úÖ **Xabar yuborish yakunlandi!**\n\n"
        f"üìä **Natijalar:**\n"
        f"‚Ä¢ üë• Jami: {total_users} ta\n"
        f"‚Ä¢ ‚úÖ Muvaffaqiyatli: {successful} ta\n"
        f"‚Ä¢ ‚ùå Xatolar: {failed} ta\n"
        f"‚Ä¢ üìà Muvaffaqiyat darajasi: {(successful/total_users)*100:.1f}%"
    )
    
    await context.bot.edit_message_text(
        chat_id=update.message.chat_id,
        message_id=progress_message.message_id,
        text=result_text
    )

async def handle_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pass

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ò–î–ï–û –î–õ–Ø –ê–î–ú–ò–ù–û–í
async def handle_admin_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π"""
    if not update.message or not update.effective_user:
        return
    
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    message = update.message
    caption = message.caption or ""
    
    # –ò—â–µ–º –∫–æ–¥ –¥–æ—Ä–∞–º—ã –∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –≤ —Ö–µ—à—Ç–µ–≥–∞—Ö
    dorama_code_match = re.search(r'#(\w+)', caption)
    episode_match = re.search(r'#seria[_:]?(\d+)', caption, re.IGNORECASE)
    
    if not dorama_code_match:
        await message.reply_text("‚ùå Izohda #KOD formatida dorama kodini ko'rsating")
        return
    
    if not episode_match:
        await message.reply_text("‚ùå Izohda #seria_1 formatida seriya raqamini ko'rsating")
        return
    
    dorama_code = dorama_code_match.group(1)
    episode_number = int(episode_match.group(1))
    
    file_id = None
    duration = 0
    file_size = 0
    
    if message.video:
        file_id = message.video.file_id
        duration = message.video.duration or 0
        file_size = message.video.file_size or 0
    
    if not file_id:
        await message.reply_text("‚ùå Xabar video faylni o'z ichiga olmaydi")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—Ä–∞–º–∞
        dorama = db.get_dorama(dorama_code)
        if not dorama:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Ä–∞–º—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–∑ caption
            title_match = re.search(r'#nomi[_:]?([^#\n]+)', caption, re.IGNORECASE)
            title = title_match.group(1).strip() if title_match else f"Dorama {dorama_code}"
            
            db.add_dorama(dorama_code, title)
            logger.info(f"‚úÖ Yangi dorama yaratildi: {title} ({dorama_code})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥
        if db.add_episode(dorama_code, episode_number, file_id, caption, duration, file_size):
            total_episodes = db.get_total_episodes(dorama_code)
            await message.reply_text(
                f"‚úÖ #{dorama_code} doramasiga {episode_number}-qism qo'shildi!\n\n"
                f"üìä Jami qismlar: {total_episodes} ta\n\n"
                f"Endi foydalanuvchilar ushbu qismni tomosha qilishlari mumkin."
            )
        else:
            await message.reply_text("‚ùå Bazaga qo'shishda xato")
            
    except Exception as e:
        await message.reply_text(f"‚ùå Xato: {e}")

# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í
async def add_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args and len(context.args) >= 2:
        try:
            channel_id = int(context.args[0])
            username = context.args[1]
            title = context.args[2] if len(context.args) > 2 else None
            invite_link = context.args[3] if len(context.args) > 3 else None
            is_private = context.args[4].lower() == 'true' if len(context.args) > 4 else False
            
            success = db.add_channel(channel_id, username, title, invite_link, is_private)
            
            if success:
                await update.message.reply_text(f"‚úÖ Kanal {username} qo'shildi!")
            else:
                await update.message.reply_text("‚ùå Kanal qo'shishda xato")
        except ValueError:
            await update.message.reply_text("‚ùå Kanal ID raqam bo'lishi kerak")
    else:
        await update.message.reply_text(
            "‚ùå Foydalanish: /addchannel <id> <@username> [nomi] [invite_link] [private]"
        )

async def add_private_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args and len(context.args) >= 2:
        try:
            channel_id = int(context.args[0])
            invite_link = context.args[1]
            title = context.args[2] if len(context.args) > 2 else f"Maxfiy kanal {channel_id}"
            
            success = db.add_channel(channel_id, "", title, invite_link, True)
            
            if success:
                await update.message.reply_text(f"‚úÖ Maxfiy kanal {title} qo'shildi!")
            else:
                await update.message.reply_text("‚ùå Kanal qo'shishda xato")
        except ValueError:
            await update.message.reply_text("‚ùå Kanal ID raqam bo'lishi kerak")
    else:
        await update.message.reply_text(
            "‚ùå Foydalanish: /addprivatechannel <id> <invite_link> [nomi]"
        )

async def delete_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args:
        try:
            channel_id = int(context.args[0])
            success = db.delete_channel(channel_id)
            
            if success:
                await update.message.reply_text("‚úÖ Kanal o'chirildi!")
            else:
                await update.message.reply_text("‚ùå Kanalni o'chirishda xato")
        except ValueError:
            await update.message.reply_text("‚ùå Kanal ID raqam bo'lishi kerak")
    else:
        await update.message.reply_text("‚ùå Kanal ID sini ko'rsating: /deletechannel <id>")

async def delete_dorama_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ä–∞–º—ã –ø–æ –∫–æ–¥—É"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    if context.args:
        dorama_code = context.args[0]
        success = db.delete_dorama(dorama_code)
        
        if success:
            await update.message.reply_text(f"‚úÖ Dorama #{dorama_code} o'chirildi!")
        else:
            await update.message.reply_text(f"‚ùå Doramani o'chirishda xato!")
    else:
        await update.message.reply_text(
            "‚ùå Foydalanish: /deletedorama <kod>"
        )

# –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data = query.data
    
    db.update_user_activity(user.id)
    
    if user.id not in ADMIN_IDS:
        if not await require_subscription(update, context):
            return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if data == "main_menu":
        if user.id in ADMIN_IDS:
            await query.edit_message_text("üë®‚Äçüíª Admin paneli:", reply_markup=get_admin_keyboard())
        else:
            await query.edit_message_text("Bosh menyu:", reply_markup=get_main_menu_keyboard())
    
    elif data == "search":
        await query.edit_message_text(
            "üîç Dorama nomi yoki kodini kiriting:\n\n"
            "Misol: <code>Yulduzlar</code> yoki <code>YL2024</code>",
            parse_mode="HTML"
        )
    
    elif data.startswith("all_doramas_"):
        page = int(data.split("_")[2])
        await show_all_doramas(update, context, page)
    
    elif data.startswith("recent_doramas_"):
        page = int(data.split("_")[2])
        await show_recent_doramas(update, context)
    
    elif data.startswith("popular_doramas_"):
        page = int(data.split("_")[2])
        await show_popular_doramas(update, context)
    
    elif data == "random_dorama":
        await send_random_dorama(update, context)
    
    elif data == "help":
        await show_help(update, context)
    
    elif data.startswith("dorama_"):
        dorama_code = data.split("_")[1]
        await show_dorama_info(update, context, dorama_code)
    
    elif data.startswith("send_all_"):
        dorama_code = data.split("_")[2]
        await send_all_episodes(update, context, dorama_code)
    
    elif data.startswith("watch_"):
        parts = data.split("_")
        dorama_code = parts[1]
        episode_number = int(parts[2])
        await send_single_episode(update, context, dorama_code, episode_number)
    
    elif data.startswith("all_episodes_"):
        dorama_code = data.split("_")[2]
        await show_all_episodes(update, context, dorama_code)
    
    elif data.startswith("episodes_"):
        parts = data.split("_")
        dorama_code = parts[1]
        page = int(parts[2])
        await show_all_episodes(update, context, dorama_code, page)
    
    elif data == "check_subscription":
        await check_subscription_callback(update, context)

    # –ê–î–ú–ò–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    elif data == "admin_menu":
        await query.edit_message_text("üë®‚Äçüíª Admin paneli:", reply_markup=get_admin_keyboard())
    elif data == "admin_stats":
        await show_admin_stats(query)
    elif data.startswith("admin_doramas_"):
        page = int(data.split("_")[2])
        await show_admin_doramas(query, page)
    elif data.startswith("admin_delete_"):
        if data == "admin_delete_0":
            await show_admin_doramas(query, 0, delete_mode=True)
        elif data.startswith("admin_delete_confirm_"):
            dorama_code = data.split("_")[3]
            await show_delete_confirmation(query, dorama_code)
        elif data.startswith("admin_delete_"):
            page = int(data.split("_")[2])
            await show_admin_doramas(query, page, delete_mode=True)
    elif data.startswith("admin_confirm_delete_"):
        dorama_code = data.split("_")[3]
        await delete_dorama_confirmed(query, dorama_code)
    elif data.startswith("admin_dorama_info_"):
        dorama_code = data.split("_")[3]
        await show_admin_dorama_info(query, dorama_code)
    elif data == "admin_channels":
        await show_admin_channels(query)
    elif data.startswith("admin_requests_"):
        page = int(data.split("_")[2])
        await show_admin_requests(query, page)
    elif data == "admin_settings":
        await show_admin_settings(query)
    elif data == "admin_broadcast":
        await admin_broadcast_callback(update, context)
    elif data == "admin_set_welcome":
        await admin_set_welcome_callback(update, context)
    elif data == "admin_set_help":
        await admin_set_help_callback(update, context)
    elif data == "admin_set_archive":
        await admin_set_archive_callback(update, context)
    
    elif data == "current_page":
        await query.answer()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN not set in environment variables")
            return
        
        logger.info("üöÄ Starting Korean Doramas Bot...")
        logger.info(f"üëë Admin IDs: {ADMIN_IDS}")
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("broadcast", broadcast_command))
        application.add_handler(CommandHandler("addchannel", add_channel_command))
        application.add_handler(CommandHandler("addprivatechannel", add_private_channel_command))
        application.add_handler(CommandHandler("deletechannel", delete_channel_command))
        application.add_handler(CommandHandler("deletedorama", delete_dorama_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫
        application.add_handler(ChatJoinRequestHandler(handle_chat_join_request))
        application.add_handler(ChatMemberHandler(handle_chat_member_update, ChatMemberHandler.CHAT_MEMBER))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(
            filters.VIDEO & filters.CAPTION,
            handle_admin_video
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_settings_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_callback, pattern="^.*$"))
        
        logger.info("üé¨ Koreys doramalari boti ishga tushdi!")
        logger.info("‚úÖ Bot successfully configured and ready")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"‚ùå Xato: {e}")
    except KeyboardInterrupt:
        logger.info("\nüì¥ Bot to'xtatildi")

if __name__ == "__main__":
    main()
